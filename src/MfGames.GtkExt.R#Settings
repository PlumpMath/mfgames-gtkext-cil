<!--Generated by R# Settings Manager plug-in. Please visit http://rsm.codeplex.com for more information.-->
<Configuration>
  <ResharperSettings>
    <CodeAnnotations />
    <CodeStyleSettings>
      <ExternalPath IsNull="False">
      </ExternalPath>
      <Sharing>SOLUTION</Sharing>
      <AgentSmithCSharpStyleSettings version="1">
        <CodeStyleSettings xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
          <CustomDictionaries>
            <Dictionaries>
              <CustomDictionary>
                <Name>en-US</Name>
                <CaseSensitive>false</CaseSensitive>
                <UserWords>Pango</UserWords>
              </CustomDictionary>
            </Dictionaries>
          </CustomDictionaries>
          <StringsDictionary>en-US</StringsDictionary>
          <IdentifierDictionary>en-US</IdentifierDictionary>
          <LastSelectedCustomDictionary>en-US</LastSelectedCustomDictionary>
          <CommentsSettings>
            <DictionaryName>en-US</DictionaryName>
            <CommentMatch>
              <Match>
                <AccessLevel>Public Protected ProtectedInternal</AccessLevel>
                <Declaration>Any</Declaration>
                <IsReadOnly>Maybe</IsReadOnly>
                <IsStatic>Maybe</IsStatic>
                <ParamDirection>Any</ParamDirection>
              </Match>
            </CommentMatch>
            <CommentNotMatch />
            <SuppressIfBaseHasComment>false</SuppressIfBaseHasComment>
            <MaxLineLength>80</MaxLineLength>
          </CommentsSettings>
          <NamingConventionSettings>
            <Rules>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Enum</Declaration>
                    <MarkedWithAttribute />
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>EnumerationMember</Declaration>
                    <MarkedWithAttribute />
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <NotMatches />
                <Description>Classes, Enumerations, Enumeration values should be named in Pascal</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes>
                  <string>_</string>
                  <string>m_</string>
                </MustNotHavePrefixes>
                <Rule>Pascal</Rule>
                <MustHaveSuffixes />
                <MustNotHaveSuffixes />
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                    <Declaration>Property</Declaration>
                    <MarkedWithAttribute />
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                  <Match>
                    <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                    <Declaration>Method</Declaration>
                    <MarkedWithAttribute />
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                  <Match>
                    <AccessLevel>Public Internal Protected ProtectedInternal</AccessLevel>
                    <Declaration>Event</Declaration>
                    <MarkedWithAttribute />
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <NotMatches />
                <Description>Non private properties, methods, events should be in pascal.</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes>
                  <string>_</string>
                  <string>m_</string>
                </MustNotHavePrefixes>
                <Rule>Pascal</Rule>
                <MustHaveSuffixes />
                <MustNotHaveSuffixes />
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Private</AccessLevel>
                    <Declaration>Property</Declaration>
                    <MarkedWithAttribute />
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                  <Match>
                    <AccessLevel>Private</AccessLevel>
                    <Declaration>Method</Declaration>
                    <MarkedWithAttribute />
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                  <Match>
                    <AccessLevel>Private</AccessLevel>
                    <Declaration>Event</Declaration>
                    <MarkedWithAttribute />
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <NotMatches />
                <Description>Private properties, methods, events should be in camel.</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes>
                  <string>_</string>
                  <string>m_</string>
                </MustNotHavePrefixes>
                <Rule>Camel</Rule>
                <MustHaveSuffixes />
                <MustNotHaveSuffixes />
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Field</Declaration>
                    <MarkedWithAttribute />
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <NotMatches />
                <Description>Fields should be underscore camel.</Description>
                <MustHavePrefixes>
                  <string>_</string>
                </MustHavePrefixes>
                <MustNotHavePrefixes>
                  <string>m_</string>
                </MustNotHavePrefixes>
                <Rule>Camel</Rule>
                <MustHaveSuffixes />
                <MustNotHaveSuffixes />
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Variable</Declaration>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <Description>Variable should be declared in camel.</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes>
                  <string>_</string>
                  <string>m_</string>
                </MustNotHavePrefixes>
                <Rule>Camel</Rule>
                <MustHaveSuffixes />
                <MustNotHaveSuffixes />
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Parameter</Declaration>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <Description>Function parameters should be in camel.</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes>
                  <string>_</string>
                  <string>m_</string>
                </MustNotHavePrefixes>
                <Rule>Camel</Rule>
                <MustHaveSuffixes />
                <MustNotHaveSuffixes />
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Namespace</Declaration>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <Description>Namespaces should be in Pascal.</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes>
                  <string>_</string>
                  <string>m_</string>
                </MustNotHavePrefixes>
                <Rule>Pascal</Rule>
                <MustHaveSuffixes />
                <MustNotHaveSuffixes />
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Constant</Declaration>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <Description>Constants should be in capital.</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes />
                <Rule>UpperCase</Rule>
                <MustHaveSuffixes />
                <MustNotHaveSuffixes />
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Any</Declaration>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <NotMatches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Constant</Declaration>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </NotMatches>
                <Description>Acronyms should not have more than 2 characters.</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes />
                <Rule>MatchesRegex</Rule>
                <MustHaveSuffixes />
                <MustNotHaveSuffixes />
                <Regex>^(?&gt;(XML|SQL|[A-Z]{0,2})[A-Z]?([^A-Z]|$)|[^A-Z]+)*$</Regex>
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Any</Declaration>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <NotMatches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Constant</Declaration>
                    <MarkedWithAttribute />
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Field</Declaration>
                    <MarkedWithAttribute />
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                  <Match>
                    <AccessLevel>Private</AccessLevel>
                    <Declaration>Method</Declaration>
                    <MarkedWithAttribute />
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                  <Match>
                    <AccessLevel>None</AccessLevel>
                    <Declaration>Namespace</Declaration>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </NotMatches>
                <Description>Names should not have underscore character</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes />
                <Rule>NotMatchesRegex</Rule>
                <MustHaveSuffixes />
                <MustNotHaveSuffixes />
                <Regex>(?&lt;remove&gt;_)</Regex>
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <MarkedWithAttribute>NUnit.Framework.TestFixtureAttribute</MarkedWithAttribute>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <Description>TestFixtures should end with Test.</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes>
                  <string>Test</string>
                </MustNotHavePrefixes>
                <Rule>None</Rule>
                <MustHaveSuffixes>
                  <string>Test</string>
                </MustHaveSuffixes>
                <MustNotHaveSuffixes />
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Method</Declaration>
                    <MarkedWithAttribute>NUnit.Framework.TestAttribute</MarkedWithAttribute>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <Description>Test methods should start with Test.</Description>
                <MustHavePrefixes>
                  <string>Test</string>
                </MustHavePrefixes>
                <MustNotHavePrefixes />
                <Rule>None</Rule>
                <MustHaveSuffixes />
                <MustNotHaveSuffixes>
                  <string>Test</string>
                </MustNotHaveSuffixes>
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Enum</Declaration>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <Description>Enumerations should not end with Enum.</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes />
                <Rule>None</Rule>
                <MustHaveSuffixes />
                <MustNotHaveSuffixes>
                  <string>Enum</string>
                </MustNotHaveSuffixes>
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>EnumerationMember</Declaration>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <Description>Do not name enumerations reserved.</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes />
                <Rule>NotMatchesRegex</Rule>
                <MustHaveSuffixes />
                <MustNotHaveSuffixes />
                <Regex>(?&lt;remove&gt;(reserved|Reserved))</Regex>
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Event</Declaration>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <Description>Event should not have Before or After prefix.</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes>
                  <string>Before</string>
                  <string>After</string>
                </MustNotHavePrefixes>
                <Rule>None</Rule>
                <MustHaveSuffixes />
                <MustNotHaveSuffixes />
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Enum</Declaration>
                    <MarkedWithAttribute>System.FlagsAttribute</MarkedWithAttribute>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <Description>Flags enums should have plural names</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes />
                <Rule>None</Rule>
                <MustHaveSuffixes>
                  <string>s</string>
                </MustHaveSuffixes>
                <MustNotHaveSuffixes />
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>false</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Enum</Declaration>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <NotMatches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Enum</Declaration>
                    <MarkedWithAttribute>System.FlagsAttribute</MarkedWithAttribute>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </NotMatches>
                <Description>Enums that are not flags should not have plural names</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes />
                <Rule>None</Rule>
                <MustHaveSuffixes />
                <MustNotHaveSuffixes>
                  <string>s</string>
                </MustNotHaveSuffixes>
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>false</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Attribute</InheritedFrom>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <Description>Attribute should end with Attribute.</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes />
                <Rule>None</Rule>
                <MustHaveSuffixes>
                  <string>Attribute</string>
                </MustHaveSuffixes>
                <MustNotHaveSuffixes />
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.EventArgs</InheritedFrom>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <Description>EventArgs should end with EventArgs.</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes />
                <Rule>None</Rule>
                <MustHaveSuffixes>
                  <string>EventArgs</string>
                </MustHaveSuffixes>
                <MustNotHaveSuffixes />
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>false</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Exception</InheritedFrom>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <Description>Exceptions should end with Exception.</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes />
                <Rule>None</Rule>
                <MustHaveSuffixes>
                  <string>Exception</string>
                </MustHaveSuffixes>
                <MustNotHaveSuffixes />
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.Stack</InheritedFrom>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.Generic.Stack</InheritedFrom>
                    <MarkedWithAttribute />
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <NotMatches />
                <Description>Stack should end with Collection or Stack.</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes />
                <Rule>None</Rule>
                <MustHaveSuffixes>
                  <string>Collection</string>
                  <string>Stack</string>
                </MustHaveSuffixes>
                <MustNotHaveSuffixes />
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.ICollection</InheritedFrom>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.IEnumerable</InheritedFrom>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.Generic.ICollection</InheritedFrom>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <NotMatches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.Stack</InheritedFrom>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.Queue</InheritedFrom>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.Generic.Stack</InheritedFrom>
                    <MarkedWithAttribute />
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </NotMatches>
                <Description>Collections should end with Collection.</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes />
                <Rule>None</Rule>
                <MustHaveSuffixes>
                  <string>Collection</string>
                </MustHaveSuffixes>
                <MustNotHaveSuffixes />
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.IDictionary</InheritedFrom>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.Generic.IDictionary</InheritedFrom>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <Description>Dictionary should end with Dictionary.</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes />
                <Rule>None</Rule>
                <MustHaveSuffixes>
                  <string>Dictionary</string>
                </MustHaveSuffixes>
                <MustNotHaveSuffixes />
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Class</Declaration>
                    <InheritedFrom>System.Collections.Queue</InheritedFrom>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <Description>Queue should end with Collection or Queue.</Description>
                <MustHavePrefixes />
                <MustNotHavePrefixes />
                <Rule>None</Rule>
                <MustHaveSuffixes>
                  <string>Collection</string>
                  <string>Queue</string>
                </MustHaveSuffixes>
                <MustNotHaveSuffixes />
              </NamingConventionRule>
              <NamingConventionRule>
                <IsDisabled>true</IsDisabled>
                <Matches>
                  <Match>
                    <AccessLevel>Any</AccessLevel>
                    <Declaration>Interface</Declaration>
                    <IsReadOnly>Maybe</IsReadOnly>
                    <IsStatic>Maybe</IsStatic>
                    <ParamDirection>Any</ParamDirection>
                  </Match>
                </Matches>
                <Description>Interfaces should be in Pascal and start with I.</Description>
                <MustHavePrefixes>
                  <string>I</string>
                </MustHavePrefixes>
                <MustNotHavePrefixes />
                <Rule>Pascal</Rule>
                <MustHaveSuffixes />
                <MustNotHaveSuffixes />
              </NamingConventionRule>
            </Rules>
            <Exclusions />
          </NamingConventionSettings>
          <IdentifiersToSpellCheck>
            <Match>
              <AccessLevel>Public Protected ProtectedInternal</AccessLevel>
              <Declaration>Any</Declaration>
              <IsReadOnly>Maybe</IsReadOnly>
              <IsStatic>Maybe</IsStatic>
              <ParamDirection>Any</ParamDirection>
            </Match>
          </IdentifiersToSpellCheck>
          <IdentifiersNotToSpellCheck />
          <PatternsToIgnore>
            <string>(?#email)\w+([-+.']\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*</string>
            <string>(?#url)http(s)?://([\w-]+\.)+[\w-]+(/[\w- ./?%&amp;=]*)?</string>
          </PatternsToIgnore>
        </CodeStyleSettings>
      </AgentSmithCSharpStyleSettings>
      <CSharp>
        <FormatSettings>
          <ANONYMOUS_METHOD_DECLARATION_BRACES>NEXT_LINE</ANONYMOUS_METHOD_DECLARATION_BRACES>
          <BLANK_LINES_BETWEEN_USING_GROUPS>1</BLANK_LINES_BETWEEN_USING_GROUPS>
          <CASE_BLOCK_BRACES>END_OF_LINE_NO_SPACE</CASE_BLOCK_BRACES>
          <FORCE_ATTRIBUTE_STYLE>SEPARATE</FORCE_ATTRIBUTE_STYLE>
          <FORCE_FIXED_BRACES_STYLE>ALWAYS_ADD</FORCE_FIXED_BRACES_STYLE>
          <FORCE_FOR_BRACES_STYLE>ALWAYS_ADD</FORCE_FOR_BRACES_STYLE>
          <FORCE_FOREACH_BRACES_STYLE>ALWAYS_ADD</FORCE_FOREACH_BRACES_STYLE>
          <FORCE_IFELSE_BRACES_STYLE>ALWAYS_ADD</FORCE_IFELSE_BRACES_STYLE>
          <FORCE_USING_BRACES_STYLE>ALWAYS_ADD</FORCE_USING_BRACES_STYLE>
          <FORCE_WHILE_BRACES_STYLE>ALWAYS_ADD</FORCE_WHILE_BRACES_STYLE>
          <INDENT_SIZE>4</INDENT_SIZE>
          <INITIALIZER_BRACES>NEXT_LINE</INITIALIZER_BRACES>
          <INSERT_TABS>True</INSERT_TABS>
          <KEEP_BLANK_LINES_IN_CODE>1</KEEP_BLANK_LINES_IN_CODE>
          <KEEP_BLANK_LINES_IN_DECLARATIONS>1</KEEP_BLANK_LINES_IN_DECLARATIONS>
          <KEEP_USER_LINEBREAKS>False</KEEP_USER_LINEBREAKS>
          <MODIFIERS_ORDER IsNull="False">
            <Item>public</Item>
            <Item>protected</Item>
            <Item>internal</Item>
            <Item>private</Item>
            <Item>new</Item>
            <Item>abstract</Item>
            <Item>virtual</Item>
            <Item>override</Item>
            <Item>sealed</Item>
            <Item>static</Item>
            <Item>readonly</Item>
            <Item>extern</Item>
            <Item>unsafe</Item>
            <Item>volatile</Item>
          </MODIFIERS_ORDER>
          <PLACE_CONSTRUCTOR_INITIALIZER_ON_SAME_LINE>False</PLACE_CONSTRUCTOR_INITIALIZER_ON_SAME_LINE>
          <PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE>False</PLACE_FIELD_ATTRIBUTE_ON_SAME_LINE>
          <PLACE_SIMPLE_LINQ_ON_SINGLE_LINE>False</PLACE_SIMPLE_LINQ_ON_SINGLE_LINE>
          <PLACE_TYPE_CONSTRAINTS_ON_SAME_LINE>False</PLACE_TYPE_CONSTRAINTS_ON_SAME_LINE>
          <PLACE_WHILE_ON_NEW_LINE>True</PLACE_WHILE_ON_NEW_LINE>
          <SIMPLE_EMBEDDED_STATEMENT_STYLE>LINE_BREAK</SIMPLE_EMBEDDED_STATEMENT_STYLE>
          <SPACE_AFTER_ATTRIBUTE_COLON>False</SPACE_AFTER_ATTRIBUTE_COLON>
          <SPACE_AROUND_MULTIPLICATIVE_OP>True</SPACE_AROUND_MULTIPLICATIVE_OP>
          <SPACE_BEFORE_SIZEOF_PARENTHESES>False</SPACE_BEFORE_SIZEOF_PARENTHESES>
          <SPACE_BEFORE_TYPE_PARAMETER_CONSTRAINT_COLON>False</SPACE_BEFORE_TYPE_PARAMETER_CONSTRAINT_COLON>
          <SPACE_BEFORE_TYPEOF_PARENTHESES>False</SPACE_BEFORE_TYPEOF_PARENTHESES>
          <SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES>True</SPACE_WITHIN_SINGLE_LINE_ARRAY_INITIALIZER_BRACES>
          <STICK_COMMENT>False</STICK_COMMENT>
          <WRAP_AFTER_DECLARATION_LPAR>True</WRAP_AFTER_DECLARATION_LPAR>
          <WRAP_AFTER_INVOCATION_LPAR>True</WRAP_AFTER_INVOCATION_LPAR>
          <WRAP_ARGUMENTS_STYLE>CHOP_IF_LONG</WRAP_ARGUMENTS_STYLE>
          <WRAP_BEFORE_EXTENDS_COLON>True</WRAP_BEFORE_EXTENDS_COLON>
          <WRAP_BEFORE_FIRST_TYPE_PARAMETER_CONSTRAINT>True</WRAP_BEFORE_FIRST_TYPE_PARAMETER_CONSTRAINT>
          <WRAP_LIMIT>80</WRAP_LIMIT>
          <WRAP_PARAMETERS_STYLE>CHOP_ALWAYS</WRAP_PARAMETERS_STYLE>
        </FormatSettings>
        <UsingsSettings />
        <Naming2>
          <ExceptionName IsNull="False">
          </ExceptionName>
          <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="TypesAndNamespaces" />
          <PredefinedRule Inspect="True" Prefix="I" Suffix="" Style="AaBb" ElementKind="Interfaces" />
          <PredefinedRule Inspect="True" Prefix="T" Suffix="" Style="AaBb" ElementKind="TypeParameters" />
          <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="MethodPropertyEvent" />
          <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Locals" />
          <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="LocalConstants" />
          <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Parameters" />
          <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PublicFields" />
          <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Constants" />
          <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="StaticReadonly" />
          <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="EnumMember" />
          <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Other" />
        </Naming2>
        <CustomMemberReorderingPatterns><![CDATA[<?xml version="1.0" encoding="utf-8" ?>

<!--
I. Overall

I.1 Each pattern can have <Match>....</Match> element. For the given type declaration, the pattern with the match, evaluated to 'true' with the largest weight, will be used 
I.2 Each pattern consists of the sequence of <Entry>...</Entry> elements. Type member declarations are distributed between entries
I.3 If pattern has RemoveAllRegions="true" attribute, then all regions will be cleared prior to reordering. Otherwise, only auto-generated regions will be cleared
I.4 The contents of each entry is sorted by given keys (First key is primary,  next key is secondary, etc). Then the declarations are grouped and en-regioned by given property

II. Available match operands

Each operand may have Weight="..." attribute. This weight will be added to the match weight if the operand is evaluated to 'true'.
The default weight is 1

II.1 Boolean functions:
II.1.1 <And>....</And>
II.1.2 <Or>....</Or>
II.1.3 <Not>....</Not>

II.2 Operands
II.2.1 <Kind Is="..."/>. Kinds are: class, struct, interface, enum, delegate, type, constructor, destructor, property, indexer, method, operator, field, constant, event, member
II.2.2 <Name Is="..." [IgnoreCase="true/false"] />. The 'Is' attribute contains regular expression
II.2.3 <HasAttribute CLRName="..." [Inherit="true/false"] />. The 'CLRName' attribute contains regular expression
II.2.4 <Access Is="..."/>. The 'Is' values are: public, protected, internal, protected internal, private
II.2.5 <Static/>
II.2.6 <Abstract/>
II.2.7 <Virtual/>
II.2.8 <Override/>
II.2.9 <Sealed/>
II.2.10 <Readonly/>
II.2.11 <ImplementsInterface CLRName="..."/>. The 'CLRName' attribute contains regular expression
II.2.12 <HandlesEvent />
-->

<Patterns xmlns="urn:shemas-jetbrains-com:member-reordering-patterns">

  <!--Do not reorder COM interfaces and structs marked by StructLayout attribute-->
  <Pattern>
    <Match>
      <Or Weight="100">
        <And>
          <Kind Is="interface"/>
          <Or>
            <HasAttribute CLRName="System.Runtime.InteropServices.InterfaceTypeAttribute"/>
            <HasAttribute CLRName="System.Runtime.InteropServices.ComImport"/>
          </Or>
        </And>
        <HasAttribute CLRName="System.Runtime.InteropServices.StructLayoutAttribute"/>
      </Or>
    </Match>
  </Pattern>

  <!--Default pattern-->
  <Pattern>

    <!--public delegate-->
    <Entry>
      <Match>
        <And Weight="100">
          <Access Is="public"/>
          <Kind Is="delegate"/>
        </And>
      </Match>
      <Sort>
        <Name/>
      </Sort>
      <Group Region="Delegates"/>
    </Entry>
    
    <!--public enum-->
    <Entry>
      <Match>
        <And Weight="100">
          <Access Is="public"/>
          <Kind Is="enum"/>
        </And>
      </Match>
      <Sort>
        <Name/>
      </Sort>
      <Group>
        <Name Region="${Name} enum"/>
      </Group>
    </Entry>

    <!--fields and constants-->
    <Entry>
      <Match>
        <Or>
          <Kind Is="constant"/>
          <Kind Is="field"/>
        </Or>
      </Match>
      <Sort>
        <Kind Order="constant field"/>
        <Static/>
        <Readonly/>
        <Name/>
      </Sort>
    </Entry>

    <!--Constructors. Place static one first-->
    <Entry>
      <Match>
        <Kind Is="constructor"/>
      </Match>
      <Sort>
        <Static/>
      </Sort>
    </Entry>
    
    <!--properties, indexers-->
    <Entry>
      <Match>
        <Or>
          <Kind Is="property"/>
          <Kind Is="indexer"/>
        </Or>
      </Match>
      <Sort>
        <Name/>
      </Sort>
    </Entry>
    
    <!--all other members-->
    <Entry>
      <Sort>
        <Name/>
      </Sort>
    </Entry>
    
    <!--nested types-->
    <Entry>
      <Match>
        <Kind Is="type"/>
      </Match>
      <Sort>
        <Name/>
      </Sort>
      <Group>
        <Name Region="Nested type: ${Name}"/>
      </Group>
    </Entry>
  </Pattern>
  
</Patterns>
]]></CustomMemberReorderingPatterns>
      </CSharp>
      <VB>
        <FormatSettings>
          <INDENT_SIZE>4</INDENT_SIZE>
        </FormatSettings>
        <ImportsSettings />
        <Naming2 />
      </VB>
      <FileHeader Region="Copyright and License"><![CDATA[Copyright (c) 2009-2011, Moonfire Games

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.]]></FileHeader>
      <GenerateMemberBody />
      <Naming2>
        <ExceptionName IsNull="False">
        </ExceptionName>
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Locals" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="Parameters" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="MethodPropertyEvent" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="TypesAndNamespaces" />
        <PredefinedRule Inspect="True" Prefix="I" Suffix="" Style="AaBb" ElementKind="Interfaces" />
        <PredefinedRule Inspect="True" Prefix="T" Suffix="" Style="AaBb" ElementKind="TypeParameters" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="LocalConstants" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PublicFields" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Constants" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="StaticReadonly" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="EnumMember" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="Other" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="PrivateInstanceFields" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="aaBb" ElementKind="PrivateStaticFields" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateConstants" />
        <PredefinedRule Inspect="True" Prefix="" Suffix="" Style="AaBb" ElementKind="PrivateStaticReadonly" />
        <Abbreviation Text="IO" />
      </Naming2>
    </CodeStyleSettings>
    <HighlightingSettings>
      <SeverityTable>
        <UnknownProperty>WARNING</UnknownProperty>
        <UnknownTarget>WARNING</UnknownTarget>
        <UnknownItemGroup>WARNING</UnknownItemGroup>
        <UnknownTask>WARNING</UnknownTask>
        <UnknownTaskElement>WARNING</UnknownTaskElement>
        <RedundantBaseConstructorCall>WARNING</RedundantBaseConstructorCall>
        <RedundantBoolCompare>WARNING</RedundantBoolCompare>
        <RedundantThisQualifier>WARNING</RedundantThisQualifier>
        <RedundantBaseQualifier>WARNING</RedundantBaseQualifier>
        <RedundantNameQualifier>WARNING</RedundantNameQualifier>
        <RedundantCast>WARNING</RedundantCast>
        <EmptyConstructor>WARNING</EmptyConstructor>
        <EmptyDestructor>WARNING</EmptyDestructor>
        <RedundantOverridenMember>WARNING</RedundantOverridenMember>
        <EmptyNamespace>WARNING</EmptyNamespace>
        <SealedMemberInSealedClass>WARNING</SealedMemberInSealedClass>
        <RedundantCatchClause>WARNING</RedundantCatchClause>
        <RedundantEmptyFinallyBlock>WARNING</RedundantEmptyFinallyBlock>
        <RedundantAssignment>WARNING</RedundantAssignment>
        <RedundantToStringCall>WARNING</RedundantToStringCall>
        <RedundantStringToCharArrayCall>WARNING</RedundantStringToCharArrayCall>
        <RedundantTypeArgumentsOfMethod>WARNING</RedundantTypeArgumentsOfMethod>
        <TooWideLocalVariableScope>SUGGESTION</TooWideLocalVariableScope>
        <UnusedAnonymousMethodSignature>WARNING</UnusedAnonymousMethodSignature>
        <MoreSpecificForeachVariableTypeAvailable>SUGGESTION</MoreSpecificForeachVariableTypeAvailable>
        <RedundantDelegateCreation>WARNING</RedundantDelegateCreation>
        <RedundantExtendsListEntry>WARNING</RedundantExtendsListEntry>
        <PartialTypeWithSinglePart>WARNING</PartialTypeWithSinglePart>
        <PartialMethodWithSinglePart>WARNING</PartialMethodWithSinglePart>
        <RedundantAttributeParentheses>WARNING</RedundantAttributeParentheses>
        <ForStatementConditionIsTrue>WARNING</ForStatementConditionIsTrue>
        <RedundantUnsafeContext>WARNING</RedundantUnsafeContext>
        <EnumUnderlyingTypeIsInt>WARNING</EnumUnderlyingTypeIsInt>
        <SuggestUseVarKeywordEverywhere>DO_NOT_SHOW</SuggestUseVarKeywordEverywhere>
        <SuggestUseVarKeywordEvident>SUGGESTION</SuggestUseVarKeywordEvident>
        <RedundantEmptyObjectCreationArgumentList>WARNING</RedundantEmptyObjectCreationArgumentList>
        <RedundantEmptyObjectOrCollectionInitializer>WARNING</RedundantEmptyObjectOrCollectionInitializer>
        <RedundantCollectionInitializerElementBraces>WARNING</RedundantCollectionInitializerElementBraces>
        <UseObjectOrCollectionInitializer>DO_NOT_SHOW</UseObjectOrCollectionInitializer>
        <InvokeAsExtensionMethod>SUGGESTION</InvokeAsExtensionMethod>
        <RedundantExplicitArrayCreation>WARNING</RedundantExplicitArrayCreation>
        <RedundantExplicitArraySize>WARNING</RedundantExplicitArraySize>
        <ConvertToAutoProperty>SUGGESTION</ConvertToAutoProperty>
        <ConvertToAutoPropertyWithPrivateSetter>HINT</ConvertToAutoPropertyWithPrivateSetter>
        <RedundantDefaultFieldInitializer>WARNING</RedundantDefaultFieldInitializer>
        <RedundantIfElseBlock>WARNING</RedundantIfElseBlock>
        <ConvertNullableToShortForm>SUGGESTION</ConvertNullableToShortForm>
        <RedundantParams>WARNING</RedundantParams>
        <PublicConstructorInAbstractClass>SUGGESTION</PublicConstructorInAbstractClass>
        <RedundantCaseLabel>WARNING</RedundantCaseLabel>
        <RedundantAnonymousTypePropertyName>WARNING</RedundantAnonymousTypePropertyName>
        <SimilarAnonymousTypeNearby>HINT</SimilarAnonymousTypeNearby>
        <RedundantExplicitNullableCreation>WARNING</RedundantExplicitNullableCreation>
        <ConvertIfStatementToNullCoalescingExpression>SUGGESTION</ConvertIfStatementToNullCoalescingExpression>
        <ConvertIfStatementToConditionalTernaryExpression>SUGGESTION</ConvertIfStatementToConditionalTernaryExpression>
        <ConvertIfStatementToReturnStatement>HINT</ConvertIfStatementToReturnStatement>
        <ConvertConditionalTernaryToNullCoalescing>SUGGESTION</ConvertConditionalTernaryToNullCoalescing>
        <InvertIf>HINT</InvertIf>
        <ConvertIfStatementToSwitchStatement>HINT</ConvertIfStatementToSwitchStatement>
        <JoinDeclarationAndInitializer>SUGGESTION</JoinDeclarationAndInitializer>
        <ReplaceWithStringIsNullOrEmpty>SUGGESTION</ReplaceWithStringIsNullOrEmpty>
        <ConvertToStaticClass>SUGGESTION</ConvertToStaticClass>
        <ConvertToLambdaExpression>SUGGESTION</ConvertToLambdaExpression>
        <ConverClosureToMethodGroup>SUGGESTION</ConverClosureToMethodGroup>
        <RedundantLambdaParameterType>WARNING</RedundantLambdaParameterType>
        <RedundantLambdaSignatureParentheses>WARNING</RedundantLambdaSignatureParentheses>
        <DoubleNegationOperator>WARNING</DoubleNegationOperator>
        <AssignNullToNotNullAttribute>WARNING</AssignNullToNotNullAttribute>
        <PossibleNullReferenceException>WARNING</PossibleNullReferenceException>
        <ConditionIsAlwaysTrueOrFalse>WARNING</ConditionIsAlwaysTrueOrFalse>
        <ConstantNullColescingCondition>WARNING</ConstantNullColescingCondition>
        <UnusedMember.Local>WARNING</UnusedMember.Local>
        <UnusedMember.Global>SUGGESTION</UnusedMember.Global>
        <MemberCanBePrivate.Local>SUGGESTION</MemberCanBePrivate.Local>
        <MemberCanBePrivate.Global>SUGGESTION</MemberCanBePrivate.Global>
        <MemberCanBeProtected.Local>SUGGESTION</MemberCanBeProtected.Local>
        <MemberCanBeProtected.Global>SUGGESTION</MemberCanBeProtected.Global>
        <MemberCanBeInternal>DO_NOT_SHOW</MemberCanBeInternal>
        <ClassNeverInstantiated.Local>SUGGESTION</ClassNeverInstantiated.Local>
        <ClassNeverInstantiated.Global>SUGGESTION</ClassNeverInstantiated.Global>
        <UnusedMethodReturnValue.Local>WARNING</UnusedMethodReturnValue.Local>
        <UnusedMethodReturnValue.Global>SUGGESTION</UnusedMethodReturnValue.Global>
        <UnusedParameter.Local>WARNING</UnusedParameter.Local>
        <UnusedParameter.Global>SUGGESTION</UnusedParameter.Global>
        <ConvertToConstant.Local>SUGGESTION</ConvertToConstant.Local>
        <ConvertToConstant.Global>SUGGESTION</ConvertToConstant.Global>
        <FieldCanBeMadeReadOnly.Local>SUGGESTION</FieldCanBeMadeReadOnly.Local>
        <FieldCanBeMadeReadOnly.Global>SUGGESTION</FieldCanBeMadeReadOnly.Global>
        <UnaccessedField.Local>WARNING</UnaccessedField.Local>
        <UnaccessedField.Global>SUGGESTION</UnaccessedField.Global>
        <SuggestBaseTypeForParameter>DO_NOT_SHOW</SuggestBaseTypeForParameter>
        <MemberCanBeMadeStatic.Local>SUGGESTION</MemberCanBeMadeStatic.Local>
        <MemberCanBeMadeStatic.Global>SUGGESTION</MemberCanBeMadeStatic.Global>
        <UnusedTypeParameter>WARNING</UnusedTypeParameter>
        <RedundantUsingDirective>WARNING</RedundantUsingDirective>
        <EventNeverSubscribedTo.Local>SUGGESTION</EventNeverSubscribedTo.Local>
        <EventNeverSubscribedTo.Global>SUGGESTION</EventNeverSubscribedTo.Global>
        <VirtualMemberNeverOverriden.Local>SUGGESTION</VirtualMemberNeverOverriden.Local>
        <VirtualMemberNeverOverriden.Global>SUGGESTION</VirtualMemberNeverOverriden.Global>
        <ClassWithVirtualMembersNeverInherited.Local>SUGGESTION</ClassWithVirtualMembersNeverInherited.Local>
        <ClassWithVirtualMembersNeverInherited.Global>SUGGESTION</ClassWithVirtualMembersNeverInherited.Global>
        <ClassCanBeSealed.Local>DO_NOT_SHOW</ClassCanBeSealed.Local>
        <ClassCanBeSealed.Global>DO_NOT_SHOW</ClassCanBeSealed.Global>
        <UnassignedField.Global>SUGGESTION</UnassignedField.Global>
        <UnusedAutoPropertyAccessor.Local>WARNING</UnusedAutoPropertyAccessor.Local>
        <UnusedAutoPropertyAccessor.Global>WARNING</UnusedAutoPropertyAccessor.Global>
        <EventNeverInvoked.Global>SUGGESTION</EventNeverInvoked.Global>
        <SuspiciousTypeConversion.Global>SUGGESTION</SuspiciousTypeConversion.Global>
        <FunctionNeverReturns>WARNING</FunctionNeverReturns>
        <LocalVariableHidesMember>WARNING</LocalVariableHidesMember>
        <EmptyGeneralCatchClause>WARNING</EmptyGeneralCatchClause>
        <ParameterHidesMember>WARNING</ParameterHidesMember>
        <ValueParameterNotUsed>WARNING</ValueParameterNotUsed>
        <DoNotCallOverridableMethodsInConstructor>WARNING</DoNotCallOverridableMethodsInConstructor>
        <PossibleIntendedRethrow>WARNING</PossibleIntendedRethrow>
        <FormatStringProblem>WARNING</FormatStringProblem>
        <ReferenceEqualsWithValueType>WARNING</ReferenceEqualsWithValueType>
        <CompareNonConstrainedGenericWithNull>WARNING</CompareNonConstrainedGenericWithNull>
        <AccessToStaticMemberViaDerivedType>WARNING</AccessToStaticMemberViaDerivedType>
        <AccessToModifiedClosure>WARNING</AccessToModifiedClosure>
        <PossibleInterfaceMemberAmbiguity>WARNING</PossibleInterfaceMemberAmbiguity>
        <CannotApplyEqualityOperatorToType>WARNING</CannotApplyEqualityOperatorToType>
        <BitwiseOperatorOnEnumWihtoutFlags>WARNING</BitwiseOperatorOnEnumWihtoutFlags>
        <PossibleLossOfFraction>WARNING</PossibleLossOfFraction>
        <ConstructorInitializerLoop>WARNING</ConstructorInitializerLoop>
        <CharImplicitlyConvertedToNumeric>WARNING</CharImplicitlyConvertedToNumeric>
        <InconsistentNaming>WARNING</InconsistentNaming>
        <RequiredBaseTypesIsNotInherited>WARNING</RequiredBaseTypesIsNotInherited>
        <UnsupportedRequiredBaseType>WARNING</UnsupportedRequiredBaseType>
        <RequiredBaseTypesDirectConflict>WARNING</RequiredBaseTypesDirectConflict>
        <RequiredBaseTypesConflict>WARNING</RequiredBaseTypesConflict>
        <BaseMemberHasParams>WARNING</BaseMemberHasParams>
        <CheckNamespace>WARNING</CheckNamespace>
        <Xaml.RedundanNamespaceAlias>WARNING</Xaml.RedundanNamespaceAlias>
        <Xaml.RedundanResource>WARNING</Xaml.RedundanResource>
        <WordIsNotInDictionary>SUGGESTION</WordIsNotInDictionary>
        <WordCanBeSurroundedWithMetaTags>SUGGESTION</WordCanBeSurroundedWithMetaTags>
        <PublicMembersMustHaveComments>SUGGESTION</PublicMembersMustHaveComments>
        <DelcarationDoesntConformToNamingConventions>WARNING</DelcarationDoesntConformToNamingConventions>
        <ResxSpellCheckSuggestion>WARNING</ResxSpellCheckSuggestion>
        <StringLiteralsWordIsNotInDictionary>SUGGESTION</StringLiteralsWordIsNotInDictionary>
        <VerbatimStringLiteralsWordIsNotInDictionary>SUGGESTION</VerbatimStringLiteralsWordIsNotInDictionary>
        <IdentifierWordIsNotInDictionary>SUGGESTION</IdentifierWordIsNotInDictionary>
      </SeverityTable>
    </HighlightingSettings>
    <CodeCleanup SilentCleanup="Deep Cleanup" RecentlyUsed="Deep Cleanup">
      <Profile name="Deep Cleanup">
        <CSArrangeThisQualifier>True</CSArrangeThisQualifier>
        <CSRemoveCodeRedundancies>True</CSRemoveCodeRedundancies>
        <CSUseAutoProperty>True</CSUseAutoProperty>
        <CSMakeFieldReadonly>True</CSMakeFieldReadonly>
        <CSUseVar>
          <BehavourStyle>DISABLED</BehavourStyle>
          <LocalVariableStyle>IMPLICIT_WHEN_INITIALIZER_HAS_TYPE</LocalVariableStyle>
          <ForeachVariableStyle>ALWAYS_EXPLICIT</ForeachVariableStyle>
        </CSUseVar>
        <CSUpdateFileHeader>True</CSUpdateFileHeader>
        <VBOptimizeImports>False</VBOptimizeImports>
        <VBShortenReferences>False</VBShortenReferences>
        <CSOptimizeUsings>
          <OptimizeUsings>True</OptimizeUsings>
          <EmbraceInRegion>True</EmbraceInRegion>
          <RegionName>Namespaces</RegionName>
        </CSOptimizeUsings>
        <CSShortenReferences>True</CSShortenReferences>
        <VBReformatCode>False</VBReformatCode>
        <CSReformatCode>True</CSReformatCode>
        <CSReorderTypeMembers>True</CSReorderTypeMembers>
      </Profile>
    </CodeCleanup>
  </ResharperSettings>
</Configuration>